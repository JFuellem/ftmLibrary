{
********* KOALA - AN ADVANCED SCRIPTING LIBRARY FOR KSP DEVELOPERS *********

This file is part of Koala - An advanced scripting library for KSP developers.

Copyright (c) 2016 Davide Magni

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
in the documentation and/or other materials provided with the distribution.

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
	
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

CONTACTS

koala@davidemagni.com
www.davidemagni.com
Skype: magneto538
Twitter: magneto538

}  

SET_CONDITION(ENABLE_DEBUG)

import "Koala/Koala.ksp"

on init
	activate_logger(get_folder(GET_FOLDER_PATCH_DIR) & "/log.nka")
	Koala.init
	create_instrument(540, "", "", "Koala_Testing")


	create_family(samplemenus, 1)
	create_family(debugknobs, 2)

    define NUM_MENUS := 4
    define NUM_ENTRIES := 6

    declare !sounds[NUM_ENTRIES]
    !sounds[0] := "Empty"
    !sounds[1] := "Bolly 1"
    !sounds[2] := "Bolly 2"
    !sounds[3] := "Trolly 1"
    !sounds[4] := "Trolly 2"
    !sounds[5] := "Trolly 3"

    declare $activeMenus := 0
    declare $inActiveMenus := 0
    declare %menuStates[NUM_MENUS]
    declare $count

    // Reflects whether a menu has a sample loaded
    for $count := 0 to NUM_MENUS - 1
        %menuStates[$count] := 0
    end for

    declare %menuCoord[2]

    macro makeCoolMenu(#n#)
        %menuCoord[0] := 60 + 100 * #n#
        %menuCoord[1] := 60
        create_menu(sampleMenu#n#, samplemenus, %menuCoord[0], %menuCoord[1], 50, 20, 0, NUM_ENTRIES, REGULAR.BLACK, 0, 1, "ori.png")
    end macro
    
    iterate_macro(makeCoolMenu) := 0 to NUM_MENUS - 1

    declare $knobCXval
    declare $knobCYval 

    declare $knobFXval
    declare $knobFYval
    

    macro makeDebugKnobs(#n#)
        $knobCXval := 60 + 100 * #n#
        $knobCYval := 200

        create_knob(S#n#vclose, debugknobs, $knobCXval, $knobCYval, 0, 631000, 500000, 10, 1, $KNOB_UNIT_DB, "S1 Close")
   
        $knobFXval := 60 + 100 * #n#
        $knobFYval := 300

        create_knob(S#n#vfar, debugknobs, $knobFXval, $knobFYval, 0, 631000, 500000, 10, 1, $KNOB_UNIT_DB, "S1 Far")

        set_knob_label(S#n#vclose, get_engine_par_disp($ENGINE_PAR_VOLUME, 2*#n#+1,-1,-1))
        set_knob_label(S#n#vfar, get_engine_par_disp($ENGINE_PAR_VOLUME,2*#n#+2,-1,-1))
        
    end macro

    iterate_macro(makeDebugKnobs) := 0 to NUM_MENUS - 1


    // populating the menus
    declare $soundsCount

    macro addMenuItems(#n#)
        for $soundsCount := 0 to num_elements(!sounds) - 1
        add_menu_item (sampleMenu#n#, !sounds[$soundsCount], $soundsCount)
        end for
    end macro

    iterate_macro(addMenuItems) := 0 to NUM_MENUS -1


    //declares and saves the menus to an array
    declare %menuVals[NUM_MENUS]
    macro storeMenuToArray(#n#)
        %menuVals[#n#] := sampleMenu#n#
    end macro


    macro setEngineVol(#n#)
        set_engine_par($ENGINE_PAR_VOLUME,S#n#vclose,2*#n#+1,-1,-1)
        set_engine_par($ENGINE_PAR_VOLUME,S#n#vfar,2*#n#+2,-1,-1)
        set_knob_label(S#n#vclose, get_engine_par_disp($ENGINE_PAR_VOLUME, 2*#n#+1,-1,-1))
        set_knob_label(S#n#vfar, get_engine_par_disp($ENGINE_PAR_VOLUME,2*#n#+2,-1,-1))
    end macro

end on 


     

on persistence_changed 
	DEBUG.on_persistence_changed

    //reset_family_values(samplemenus)
    //reset_family_values(debugknobs)
    iterate_macro(checkactivesamps) := 0 to NUM_MENUS - 1

    //$inActiveMenus := count_entries(%menuVals, 0)
    //$activeMenus := NUM_MENUS - $inActiveMenus

    iterate_macro(setEngineVol) := 0 to NUM_MENUS - 1

    iterate_macro(storeMenuToArray) := 0 to NUM_MENUS -1

end on

on listener 
	DEBUG.on_listener

	// Your script here

end on

on note 
	DEBUG.on_note

	disallow_group($ALL_GROUPS)

    for $count := 0 to $activeMenus - 1
        if (%menuStates[$count] = 1)
            allow_group($count * 2 +1)
            allow_group($count * 2 +2)
            if (%menuVals[$count] # 0)
                play_note($EVENT_NOTE,%menuVals[$count],0,-1)
            end if
        end if
    end for
        
	DEBUG.groups_monitor
end on


    macro checkactivesamps(#n#)
        on ui_control (sampleMenu#n#)
            %menuVals[#n#] := sampleMenu#n#
            $inActiveMenus := count_entries(%menuVals, 0)
            $activeMenus := NUM_MENUS - $inActiveMenus
            if (sampleMenu#n# # 0)
                %menuStates[#n#] := 1
            else
                %menuStates[#n#] := 0
            end if
            message($activeMenus)
        end on
    end macro

    iterate_macro(checkactivesamps) := 0 to NUM_MENUS - 1

    macro checkKnobs(#n#)
        on ui_control (S#n#vclose)
        set_engine_par($ENGINE_PAR_VOLUME,S#n#vclose,2*#n#+1,-1,-1)
        set_knob_label(S#n#vclose,get_engine_par_disp($ENGINE_PAR_VOLUME,2*#n#+1,-1,-1))
        end on
    end macro

    iterate_macro(checkKnobs) := 0 to NUM_MENUS - 1

    macro checkFarKnobs(#n#)
        on ui_control (S#n#vfar)
        set_engine_par($ENGINE_PAR_VOLUME,S#n#vfar,2*#n#+2,-1,-1)
        set_knob_label(S#n#vfar,get_engine_par_disp($ENGINE_PAR_VOLUME,2*#n#+2,-1,-1))
        end on
    end macro

    iterate_macro(checkFarKnobs) := 0 to NUM_MENUS - 1


{
    on ui_control (S1vclose)
    set_engine_par($ENGINE_PAR_VOLUME,S1vclose,1,-1,-1)
    set_knob_label(S1vclose,get_engine_par_disp($ENGINE_PAR_VOLUME,1,-1,-1))
    end on

    on ui_control (S1vfar)
    set_engine_par($ENGINE_PAR_VOLUME,S1vfar,2,-1,-1)
    set_knob_label(S1vfar,get_engine_par_disp($ENGINE_PAR_VOLUME,2,-1,-1))
    end on

  }

on release 
	DEBUG.on_release

	// Your script here

end on

on controller 
	DEBUG.on_controller

	// Your script here

end on

on pgs_changed
	DEBUG.on_pgs_changed

	// Your script here

end on

on poly_at
	DEBUG.on_poly_at

	// Your script here

end on 

on rpn 
	DEBUG.on_rpn_nrpn

	// Your script here

end on

on async_complete
	DEBUG.on_async_complete

	// Your script here

end on

on nrpn 
	DEBUG.on_rpn_nrpn

	// Your script here

end on
