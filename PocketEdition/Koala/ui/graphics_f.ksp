{
********* KOALA - AN ADVANCED SCRIPTING LIBRARY FOR KSP DEVELOPERS *********

This file is part of Koala - An advanced scripting library for KSP developers.

Copyright (c) 2016 Davide Magni

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
in the documentation and/or other materials provided with the distribution.

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

CONTACTS

koala@davidemagni.com
www.davidemagni.com
Skype: magneto538
Twitter: magneto538

}   

// UI initialization
function create_instrument(height, wallpaper, icon, title)
	make_perfview	

	message("")
	INST_WALLPAPER_ID -> picture := wallpaper 
	INST_ICON_ID -> picture := icon 

	INST_HEIGHT := height

	USE_CODE_IF_NOT(ENABLE_DEBUG)
	    set_script_title(title)
	    set_ui_height_px(height)
	END_USE_CODE

	USE_CODE_IF(ENABLE_DEBUG)
	    set_script_title("### " & title)
	    if height <= 540 
    		set_ui_height_px(540)
    	else 
    		set_ui_height_px(height)
	    end if
	END_USE_CODE
end function

function set_ui_data(width, hex_color)
	INST_WIDTH := width 
	INST_COLOR := hex_color
	set_ui_width_px(width)
	set_ui_color(hex_color)
end function

// UI Controls functions
function resize_ctrl(ui_id, w, h)
	set_control_par(ui_id, CONTROL_PAR_WIDTH, w)
	set_control_par(ui_id, CONTROL_PAR_HEIGHT, h)
	_update_init_value(ui_id, _UI_WIDTH, w)
	_update_init_value(ui_id, _UI_HEIGHT, h)	
end function

function set_pos(ui_id, x, y)
	set_control_par(ui_id, CONTROL_PAR_POS_X, x)
	set_control_par(ui_id, CONTROL_PAR_POS_Y, y)
	_update_init_value(ui_id, _UI_POS_X, x)
	_update_init_value(ui_id, _UI_POS_Y, y)	
end function

function shift_ctrl(ui_id, off_x, off_y)
	set_control_par(ui_id, CONTROL_PAR_POS_X, get_pos_x(ui_id) + off_x)
	set_control_par(ui_id, CONTROL_PAR_POS_Y, get_pos_y(ui_id) + off_y)
	_update_init_value(ui_id, _UI_POS_X, get_pos_x(ui_id))
	_update_init_value(ui_id, _UI_POS_Y, get_pos_x(ui_id))	
end function

function set_ctrl_pic(ui_id, picture)
	set_control_par_str(ui_id, CONTROL_PAR_PICTURE, picture)
	_update_init_value(ui_id, !_UI_PICTURE, picture)	
end function

function set_ctrl_text(ui_id, text)
	set_control_par_str(ui_id, CONTROL_PAR_TEXT, text)
	_update_init_value(ui_id, !_UI_TEXT, text)	
end function

function set_font(ui_id, font, alignment)
	set_control_par(ui_id, CONTROL_PAR_FONT_TYPE, font)	
	set_control_par(ui_id, CONTROL_PAR_TEXT_ALIGNMENT, alignment)
	_update_init_value(ui_id, _UI_FONT_TYPE, font)
	_update_init_value(ui_id, _UI_FONT_ALIGNMENT, alignment)	
end function

function set_value(ui_id, value)
	set_control_par(ui_id, CONTROL_PAR_VALUE, value)
	_update_init_value(ui_id, _UI_DEFAULT_VALUE, value)
end function

function set_visibility(ui_id, value)
	set_control_par(ui_id, CONTROL_PAR_HIDE, value)
	_UI_CURR_VISIBILITY[search_ctrl_number(ui_id)] := value
	_update_init_value(ui_id, _UI_DEF_VISIBILITY, value)
end function 

function set_picture_state(ui_id, value)
	set_control_par(ui_id, CONTROL_PAR_PICTURE_STATE, value)
	_update_init_value(ui_id, _UI_PICTURE_STATE, value)
end function 

function set_xy_automation_data(ui_id, auto_id, auto_name)
	set_control_par_arr(ui_id, CONTROL_PAR_AUTOMATION_ID, auto_id, auto_id)
	set_control_par_str_arr(ui_id, CONTROL_PAR_AUTOMATION_NAME, auto_name, auto_id)
end function

function set_automation_data(ui_id, auto_id, auto_name)
	set_control_par(ui_id, CONTROL_PAR_ALLOW_AUTOMATION, YES)
	set_control_par(ui_id, CONTROL_PAR_AUTOMATION_ID, auto_id)
	set_control_par_str(ui_id, CONTROL_PAR_AUTOMATION_NAME, auto_name)
end function

function set_cursor_value(name, cursor_nr, axis, value)
	name[cursor_nr*2 + axis] := value
end function

// XY advanced stuff
define _XY_TO_PAR(xy_name, axis, cursor_nr, range_min, range_max) := ( real_to_int( xy_name[cursor_nr*2 + axis] *Â int_to_real(range_max - range_min) ) + range_min )

function xy_to_ctrl(xy_name, axis, cursor_nr, target_id, range_min, range_max)
	if cursor_nr # -1
		set_value(target_id, _XY_TO_PAR(xy_name, axis, cursor_nr, range_min, range_max) )
	end if
end function

function xy_to_ep(xy_name, axis, cursor_nr, range_min, range_max, engine_par, group, slot, generic)
	if cursor_nr # -1
		set_engine_par(engine_par, _XY_TO_PAR(xy_name, axis, cursor_nr, range_min, range_max), group, slot, generic)
	end if
end function

// The denominator is so long because the function outputs -1 if no cursor is selected
function active_cursor(ui_id) -> return
	return := (get_control_par(ui_id, CONTROL_PAR_ACTIVE_INDEX) / (2 - abs( math.sign(get_control_par(ui_id, CONTROL_PAR_ACTIVE_INDEX), 0) - 1 ) ))
end function

// Set XY pad cursor from midi CC and vice-versa
function cc_to_xy(xy_name, axis, cursor_nr, cc_number)
	if cursor_nr # -1
		xy_name[cursor_nr*2 + axis] := int_to_real(CC[cc_number]) / 127.0
	end if
end function

function xy_to_cc(xy_name, axis, cursor_nr, cc_number)
	set_controller(cc_number, real_to_int(xy_name[cursor_nr*2 + axis]) * 127)
end function


// Turn a slider or knob value into a percentage value (both from 0 to 100 and from 0 to 1 with real numbers)
function value_to_perc(ui_id) -> return 
	return := (get_value(ui_id) - get_ctrl_min(ui_id)) * 100 / (get_ctrl_max(ui_id) - get_ctrl_min(ui_id))
end function

function value_to_dec(ui_id) -> return 
	return := int_to_real(get_value(ui_id) - get_ctrl_min(ui_id)) / int_to_real(get_ctrl_max(ui_id) - get_ctrl_min(ui_id))
end function

function perc_to_value(ui_id, perc) -> return
	return := ((((get_ctrl_max(ui_id) - get_ctrl_min(ui_id)) * perc) / 100) + get_ctrl_min(ui_id))
end function

function dec_to_value(ui_id, decim) -> return 
	return := real_to_int(decim * int_to_real(get_ctrl_max(ui_id) - get_ctrl_min(ui_id))) + int_to_real(get_ctrl_min(ui_id)) 
end function

// Useful to reduce the range of a slider within two edge values.
function scale_slider_out(ui_id, min, max) -> return
	return := real_to_int(int_to_real(min) + value_to_dec(ui_id) * int_to_real(max-min))
end function

// Reset UI Controls functions
function reset_pos(ui_id)
	set_control_par(ui_id, CONTROL_PAR_POS_X, _UI_POS_X[search_ctrl_number(ui_id)])
	set_control_par(ui_id, CONTROL_PAR_POS_Y, _UI_POS_Y[search_ctrl_number(ui_id)])
end function

function reset_ctrl_pic(ui_id)
	set_control_par_str(ui_id, CONTROL_PAR_PICTURE, !_UI_PICTURE[search_ctrl_number(ui_id)])
end function

function reset_ctrl_text(ui_id)
	set_control_par_str(ui_id, CONTROL_PAR_TEXT, !_UI_TEXT[search_ctrl_number(ui_id)])
end function

function reset_font(ui_id)
	set_control_par(ui_id, CONTROL_PAR_FONT_TYPE, _UI_FONT_TYPE[search_ctrl_number(ui_id)])	
	set_control_par(ui_id, CONTROL_PAR_TEXT_ALIGNMENT, _UI_FONT_ALIGNMENT[search_ctrl_number(ui_id)])
end function

function reset_value(ui_id)
	set_control_par(ui_id, CONTROL_PAR_VALUE, _UI_DEFAULT_VALUE[search_ctrl_number(ui_id)])	
end function

function reset_visibility(ui_id)
	set_control_par(ui_id, CONTROL_PAR_HIDE, _UI_DEF_VISIBILITY[search_ctrl_number(ui_id)])	
end function

function reset_picture_state(ui_id)
	set_control_par(ui_id, CONTROL_PAR_PICTURE_STATE, _UI_PICTURE_STATE[search_ctrl_number(ui_id)])	
end function

// Set UI Level Meter colours. Colours are HEX values. "9" is needed to let Kontakt know that value is a number.
function set_level_meter_color(ui_id, bg_color, off_color, on_color, overload_color, peak_color)
	set_control_par(ui_id, CONTROL_PAR_BG_COLOR, bg_color)
	set_control_par(ui_id, CONTROL_PAR_OFF_COLOR, off_color)
	set_control_par(ui_id, CONTROL_PAR_ON_COLOR, on_color)
	set_control_par(ui_id, CONTROL_PAR_OVERLOAD_COLOR, overload_color)
	set_control_par(ui_id, CONTROL_PAR_PEAK_COLOR, peak_color)
end function

// Add menu entries. Used as a macro because I need to use the Wild Card #.
macro add_menu_entry(#name#, text, visibility)
	!#name#_entries[_#name#_COUNT] := text
	add_menu_item(#name#, text, _#name#_COUNT)
	set_menu_item_visibility(get_ui_id(#name#), _#name#_COUNT, visibility)
	inc(_#name#_COUNT)
end macro

// Get values
function get_def_pos_x(ui_id) -> return
	return := _UI_POS_X[search_ctrl_number(ui_id)]
end function

function get_def_pos_y(ui_id) -> return
	return := _UI_POS_Y[search_ctrl_number(ui_id)]
end function

function get_def_visibility(ui_id) -> return
	return := _UI_CURR_VISIBILITY[search_ctrl_number(ui_id)]
end function

function get_def_height(ui_id) -> return
	return := _UI_HEIGHT[search_ctrl_number(ui_id)]
end function

function get_def_value(ui_id) -> return
	return := _UI_DEFAULT_VALUE[search_ctrl_number(ui_id)]
end function

function get_def_picture(ui_id) -> return
	return := !_UI_PICTURE[search_ctrl_number(ui_id)]
end function

function get_ctrl_min(ui_id) -> return
	return := _UI_CTRL_MIN[search_ctrl_number(ui_id)]
end function

function get_ctrl_max(ui_id) -> return
	return := _UI_CTRL_MAX[search_ctrl_number(ui_id)]
end function

function get_type(ui_id) -> return
	return := _UI_TYPE[search_ctrl_number(ui_id)]
end function

function get_def_text(ui_id) -> return
	return := !_UI_TEXT[search_ctrl_number(ui_id)]
end function

function get_pos_x(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_POS_X)
end function

function get_pos_y(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_POS_Y)
end function

function get_width(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_WIDTH)
end function

function get_height(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_HEIGHT)
end function

function get_value(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_VALUE)
end function

function get_picture(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_PICTURE)
end function

function get_visibility(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_HIDE)
end function

function get_picture_state(ui_id) -> return
	return := get_control_par(ui_id, CONTROL_PAR_PICTURE_STATE)
end function

function get_ctrl_family(ui_id) -> return
	return := _UI_FAMILIES[search_ctrl_number(ui_id)]
end function

function get_cursors_num(name) -> return
	return := (num_elements(name)/2)
end function

function get_cursor_value(name, cursor_nr, axis) -> return
	return := name[cursor_nr*2 + axis]
end function
